pipeline.steps = [update_mapfile_hosts, create_images_map, create_blanked_images_map, create_vertices_map, blank_images, create_compressed_mapfile_images, make_mosaic, create_ms_map, create_compressed_mapfile_ms, sort_into_Groups, sort_into_Groups_maps, concat_data, create_compressed_mapfile, concat, make_pbimage, create_imagebase_map, createmap_image_pb, createmap_image_nopb, correct_mosaic]

pipeline.pluginpath = {{ pipeline_dir }}/plugins

update_mapfile_hosts.control.kind        = plugin
update_mapfile_hosts.control.type        = updateHosts
update_mapfile_hosts.control.mapfile_dir = input.output.mapfile_dir
update_mapfile_hosts.control.hosts       = {{ hosts }}

# create a mapfile with the existing facet images, length = nfacets
create_images_map.control.kind        = plugin
create_images_map.control.type        = addListMapfile
create_images_map.control.hosts       = {{ hosts }}
create_images_map.control.files       = {{ facet_image_filenames }}
create_images_map.control.mapfile_dir = input.output.mapfile_dir
create_images_map.control.filename    = facet_images.mapfile

# make a mapfile with the name of the WSClean image, length = 1
create_blanked_images_map.control.kind         = plugin
create_blanked_images_map.control.type         = appendMapfile
create_blanked_images_map.control.mapfile_in   = create_images_map.output.mapfile
create_blanked_images_map.control.append_index = True
create_blanked_images_map.control.append       = image
create_blanked_images_map.control.mapfile_dir  = input.output.mapfile_dir
create_blanked_images_map.control.filename     = blanked_facet_images.mapfile

# create a mapfile with the existing vertices, length = nfacets
create_vertices_map.control.kind        = plugin
create_vertices_map.control.type        = addListMapfile
create_vertices_map.control.hosts       = {{ hosts }}
create_vertices_map.control.files       = {{ facet_vertices_filenames }}
create_vertices_map.control.mapfile_dir = input.output.mapfile_dir
create_vertices_map.control.filename    = facet_vertices.mapfile

# blank (with zeros) regions of the facet images that lie outside of the facet, length = nfacets
blank_images.control.type         = blank_image
blank_images.control.mapfiles_in  = [create_images_map.output.mapfile,create_vertices_map.output.mapfile]
blank_images.control.inputkeys    = [infile,vertices_file]
blank_images.control.mapfile_out  = create_blanked_images_map.output.mapfile
blank_images.control.outputkey    = outfile
blank_images.argument.flags       = [infile,vertices_file,outfile]
blank_images.argument.blank_value = zero

# compress mapfile so that all images are in one group, length = 1
create_compressed_mapfile_images.control.kind        = plugin
create_compressed_mapfile_images.control.type        = compressMapfile
create_compressed_mapfile_images.control.mapfile_in  = blank_images.output.mapfile
create_compressed_mapfile_images.control.mapfile_dir = input.output.mapfile_dir
create_compressed_mapfile_images.control.filename    = mosaic_images_input.mapfile

# make the mosaic image, length = 1
make_mosaic.control.type        = mosaic_images
make_mosaic.control.mapfile_in  = create_compressed_mapfile_images.output.mapfile
make_mosaic.control.inputkey    = images
make_mosaic.control.outputkey   = outfile
make_mosaic.argument.flags      = [images,outfile]

# create a mapfile with all single MSs from supplied list, length = nfiles
create_ms_map.control.kind        = plugin
create_ms_map.control.type        = addListMapfile
create_ms_map.control.hosts       = {{ hosts }}
create_ms_map.control.files       = {{ ms_files_single }}
create_ms_map.control.mapfile_dir = input.output.mapfile_dir
create_ms_map.control.filename    = input_MSs_single.mapfile

# create a multi-mapfile with the groups of MSs from supplied list, length = nbands
create_msmulti_map.control.kind        = plugin
create_msmulti_map.control.type        = addListMultiMapfile
create_msmulti_map.control.hosts       = {{ hosts }}
create_msmulti_map.control.files       = {{ ms_files_grouped }}
create_msmulti_map.control.mapfile_dir = input.output.mapfile_dir
create_msmulti_map.control.filename    = input_files_grouped.mapfile

# compress mapfile so that all MSs are in one group, length = 1
create_compressed_mapfile_ms.control.kind        = plugin
create_compressed_mapfile_ms.control.type        = compressMapfile
create_compressed_mapfile_ms.control.mapfile_in  = create_ms_map.output.mapfile
create_compressed_mapfile_ms.control.mapfile_dir = input.output.mapfile_dir
create_compressed_mapfile_ms.control.filename    = compressed_MSs_all.mapfile

# sort compressed mapfile so that there is one group per timestamp, length = ntimes
sort_into_Groups.control.type         = sort_times_into_freqGroups
sort_into_Groups.argument.flags       = [create_compressed_mapfile_ms.output.mapfile]
sort_into_Groups.argument.filename    = sorted_groups.mapfile
sort_into_Groups.argument.mapfile_dir = input.output.mapfile_dir
sort_into_Groups.argument.hosts       = {{ hosts }}
sort_into_Groups.argument.target_path = input.output.working_directory/input.output.job_name

# convert the output of sort_into_Groups into usable mapfiles, len = 1 / ntimes
sort_into_Groups_maps.control.kind             = plugin
sort_into_Groups_maps.control.type             = mapfilenamesFromMapfiles
sort_into_Groups_maps.control.mapfile_groupmap = sort_into_Groups.output.groupmapfile.mapfile
sort_into_Groups_maps.control.mapfile_filesmap = sort_into_Groups.output.mapfile.mapfile

# concat data in frequency, length = ntimes
concat_data.control.type                                 = dppp
concat_data.control.mapfile_out                          = sort_into_Groups_maps.output.groupmap
concat_data.control.mapfile_in                           = sort_into_Groups_maps.output.filesmap
concat_data.control.inputkey                             = msin
concat_data.argument.numthreads                          = {{ max_cpus_per_io_proc_ntimes }}
concat_data.argument.msin.datacolumn                     = DATA
concat_data.argument.msin.missingdata                    = True
concat_data.argument.msin.orderms                        = False
concat_data.argument.msout.overwrite                     = True
concat_data.argument.msout.writefullresflag              = False
concat_data.argument.local_scratch_dir                   = {{ local_dir }}
concat_data.argument.steps                               = [avg]
concat_data.argument.avg.type                            = squash
concat_data.argument.avg.freqstep                        = {{ avgpb_freqstep }}
concat_data.argument.avg.timestep                        = {{ avgpb_timestep }}
{% if use_compression %}
concat_data.argument.msout.storagemanager                = "Dysco"
concat_data.argument.msout.storagemanager.databitrate    = 16
concat_data.argument.msout.storagemanager.weightbitrate  = 12
concat_data.argument.msout.storagemanager.distribution   = "TruncatedGaussian"
concat_data.argument.msout.storagemanager.disttruncation = 1.5
concat_data.argument.msout.storagemanager.normalization  = "AF"
{% endif %}

# create compressed mapfile of averaged data, length = 1
create_compressed_mapfile.control.kind        = plugin
create_compressed_mapfile.control.type        = compressMapfile
create_compressed_mapfile.control.mapfile_in  = concat_data.output.mapfile
create_compressed_mapfile.control.mapfile_dir = input.output.mapfile_dir
create_compressed_mapfile.control.filename    = compressed_averaged.mapfile

# virtual concat of averaged data, length = 1
concat.control.type       = virtual_concat
concat.control.mapfile_in = create_compressed_mapfile.output.mapfile
concat.control.inputkey   = msfiles
concat.control.outputkey  = msconcat
concat.argument.flags     = [msfiles,msconcat]

# make a dummy image with WSClean to get the primary beam, length = 1
make_pbimage.control.type          = wsclean
make_pbimage.control.mapfile_in    = create_compressed_mapfile.output.mapfile
make_pbimage.control.inputkey      = msfile
{% if use_idg %}
make_pbimage.argument.flags        = [-no-update-model-required,-fit-beam,-reorder,-use-idg,-grid-with-beam,-use-differential-lofar-beam,msfile]
{% else %}
make_pbimage.argument.flags        = [-no-update-model-required,-fit-beam,-reorder,-apply-primary-beam,-use-differential-lofar-beam,msfile]
{% endif %}
make_pbimage.argument.channels-out = 1
make_pbimage.argument.size         = 1024 1024
make_pbimage.argument.niter        = 1
make_pbimage.argument.pol          = I
make_pbimage.argument.weight       = briggs -0.5
make_pbimage.argument.mgain        = 1.0
make_pbimage.argument.minuv-l      = 80
make_pbimage.argument.maxuv-l      = 10000
make_pbimage.argument.mem          = {{ max_percent_memory_per_proc_single }}
make_pbimage.argument.j            = {{ max_cpus_per_proc_single }}
make_pbimage.argument.threshold    = 0.001
make_pbimage.argument.scale        = 0.006
make_pbimage.argument.padding      = 1.0
{% if use_idg %}
make_pbimage.argument.idg-mode     = {{ idg_mode }}
{% endif %}
{% if local_dir is not none %}
make_pbimage.argument.temp-dir     = {{ local_dir_parent }}
{% endif %}

# make a mapfile with the root-name of the WSClean image, length = 1
create_imagebase_map.control.kind        = plugin
create_imagebase_map.control.type        = trimMapfile
create_imagebase_map.control.mapfile_in  = make_pbimage.output.make_pbimage-image.fits.mapfile
create_imagebase_map.control.trim        = -
create_imagebase_map.control.mapfile_dir = input.output.mapfile_dir
create_imagebase_map.control.filename    = make_pbimage_rootname.mapfile

# create a map with the PB-corrected image, length = 1
createmap_image_pb.control.kind        = plugin
createmap_image_pb.control.type        = appendMapfile
createmap_image_pb.control.mapfile_in  = create_imagebase_map.output.mapfile
createmap_image_pb.control.append      = -image-pb.fits
createmap_image_pb.control.mapfile_dir = input.output.mapfile_dir
createmap_image_pb.control.filename    = pb_image.mapfile

# create a map with the PB-uncorrected image, length = 1
createmap_image_nopb.control.kind        = plugin
createmap_image_nopb.control.type        = appendMapfile
createmap_image_nopb.control.mapfile_in  = create_imagebase_map.output.mapfile
createmap_image_nopb.control.append      = -image.fits
createmap_image_nopb.control.mapfile_dir = input.output.mapfile_dir
createmap_image_nopb.control.filename    = nopb_image.mapfile

# correct the mosaic image for the primary beam, length = 1
correct_mosaic.control.type        = pb_correct
correct_mosaic.control.mapfiles_in = [make_mosaic.output.mapfile,createmap_image_pb.output.mapfile,createmap_image_nopb.output.mapfile]
correct_mosaic.control.inputkeys   = [mosaic,pb,nopb]
correct_mosaic.control.outputkey   = outroot
correct_mosaic.argument.flags      = [mosaic,pb,nopb,outroot]
